# -*- coding: utf-8 -*-
"""Ensemble_learning_gradientboosting_prediction_resources.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16CGRkkZQ5wvJ5QRJTo9lLGejxyUN7Xwp
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
#

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import classification_report, confusion_matrix, mean_squared_error, r2_score

df = pd.read_csv("ad_spend.csv")

print(df.shape)

df.sample(10)

df.isnull().sum()

g = df.groupby("Season")[["Ad Spend ($)", "Revenue ($)"]].mean()
g

g.plot(kind="bar")
plt.title("Ad Spend vs Revenue by Season")
plt.xlabel("Season")
plt.ylabel("Amount")

plt.xticks(rotation=45)
plt.show()

for season, subdf in df.groupby("Season"):
    plt.scatter(subdf["Ad Spend ($)"].values, subdf["Revenue ($)"].values, label=season)

plt.title("Ad Spend vs Revenue by Season")
plt.xlabel("Ad Spend ($)")
plt.ylabel("Revenue ($)")

plt.legend()
plt.show()

df_encoded = pd.get_dummies(df, columns=["Season"])
df

x = df_encoded.drop("Revenue ($)", axis=1)
y = df_encoded["Revenue ($)"]

X_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.25, random_state=10)

"""### Train Lenear Regression Model"""

model_lr = LinearRegression()
model_lr.fit(X_train, y_train)

y_pred_lr = model_lr.predict(X_test)
# print("Mean Squared Error:", mean_squared_error(y_test, y_pred_lr))
print("R2 Score:", r2_score(y_test, y_pred_lr))

"""### Train Decision Tree Regressor Model"""

from sklearn.tree import DecisionTreeRegressor

model_dt = DecisionTreeRegressor()
model_dt.fit(X_train, y_train)

y_pred_dt = model_dt.predict(X_test)

print("R2 Score:", r2_score(y_test, y_pred_dt))

"""### Train GBM"""

from sklearn.ensemble import GradientBoostingRegressor

model_gbm = GradientBoostingRegressor()
model_gbm.fit(X_train, y_train)

y_pred_gbm = model_gbm.predict(X_test)

print("R2 Score:", r2_score(y_test, y_pred_gbm))

df_eval = pd.DataFrame({"Actual": y_test, "Predicted": y_pred_gbm})
df_eval.head()

df_eval["Diff %"] = abs((df_eval["Predicted"] - df_eval["Actual"])*100/df_eval["Actual"])
df_eval.head()

