# -*- coding: utf-8 -*-
"""Ensemble_learning_gbclassification_resources.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1IY9SDF7rHgFh1X2d7vPjJMGkGFcb9XOE
"""

import pandas as pd

from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

df = pd.read_csv('titanic.csv')
print(df.shape)

df.head()

df.Survived.value_counts()

df.isna().sum()

df.drop('Name', axis=1, inplace=True)
df.head()

df["Sex"] = df["Sex"].map({"male": 1, "female": 2})

df.head()

x = df.drop('Survived', axis=1)
y = df['Survived']

X_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)

"""### Train Decision Tree Classifier Model"""

from sklearn.tree import DecisionTreeClassifier

model_dtc = DecisionTreeClassifier()
model_dtc.fit(X_train, y_train)

y_pred_dtc = model_dtc.predict(X_test)

print("Decision Tree Classifier Model report")
print(classification_report(y_test, y_pred_dtc))

"""### Train Random Forest Classifier Model"""

from sklearn.ensemble import RandomForestClassifier

model_rfc = RandomForestClassifier()
model_rfc.fit(X_train, y_train)

y_pred_rfc = model_rfc.predict(X_test)

print("Random Forest Classifier Model report")
print(classification_report(y_test, y_pred_rfc))

"""### Train Gradient Boosting Classifier Model"""

from sklearn.ensemble import GradientBoostingClassifier

model_gbc = GradientBoostingClassifier(n_estimators=200)
model_gbc.fit(X_train, y_train)

y_pred_gbc = model_gbc.predict(X_test)

print("Gradient Boosting Classifier Model report")
print(classification_report(y_test, y_pred_gbc))

