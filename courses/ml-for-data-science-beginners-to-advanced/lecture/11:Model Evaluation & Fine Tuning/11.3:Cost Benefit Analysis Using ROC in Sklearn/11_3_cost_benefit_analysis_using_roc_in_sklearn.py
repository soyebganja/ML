# -*- coding: utf-8 -*-
"""11.3:Cost Benefit Analysis Using ROC in Sklearn.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13mVi_6l1PForEu-gWn1Qz7BNKG7JUmrz
"""

import numpy as np
import matplotlib.pyplot as plt
from sklearn.datasets import make_classification
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report, accuracy_score

X, y = make_classification(
    n_samples=1000,
    n_features=10,
    n_informative=4,
    n_redundant=6,
    n_repeated=0,
    n_classes=2,
    random_state=42
)

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)

"""### Train Logistic Regression Classifier"""

model_lr = LogisticRegression()
model_lr.fit(X_train, y_train)

y_pred = model_lr.predict(X_test)
print(classification_report(y_test, y_pred))

probabilities = model_lr.predict_proba(X_test)[:,1]
y_pred =  (probabilities > 0.26349585272229664).astype(int)
print(classification_report(y_test, y_pred))

from sklearn.metrics import roc_curve, roc_auc_score

fpr, tpr, thresholds = roc_curve(y_test, probabilities)
roc_auc_score(y_test, probabilities)
fpr[:5], tpr[:5], thresholds[:5]

tpr

desired_recall = 0.8

np.argmin(abs(tpr - desired_recall))

thresholds[np.argmin(abs(tpr - desired_recall))]

from sklearn.metrics import auc

area = auc(fpr, tpr)
area

plt.figure()
plt.plot(fpr, tpr, color='darkorange', label='ROC curve (area = %0.2f)' % area)
plt.plot([0,1], [0,1], 'k--')
plt.xlim([0.0, 1.0])
plt.ylim([0.0, 1.05])
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')

from xgboost import XGBClassifier
from sklearn.metrics import classification_report, accuracy_score

model_xgb = XGBClassifier()
model_xgb.fit(X_train, y_train)

y_pred = model_xgb.predict(X_test)

print(classification_report(y_test, y_pred))

y_scores = model_xgb.predict_proba(X_test)[:,1]
fpr_xgb, tpr_xgb, thresholds_xgb = roc_curve(y_test, y_scores)
area2 = auc(fpr_xgb, tpr_xgb)
area2

plt.figure()

plt.plot(fpr, tpr, color='darkorange', lw=2, label='ROC curve (area = %0.2f)' % area)
plt.plot(fpr_xgb, tpr_xgb, color='green', lw=2, label='ROC curve (area = %0.2f)' % area2)

plt.plot([0,1], [0,1], 'k--')
plt.xlim([0.0, 1.0])
plt.ylim([0.0, 1.05])
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.legend(loc="lower right")
plt.show()

desired_recall = 0.92

closest_index = np.argmin(abs(tpr_xgb - desired_recall))
closest_index

thresholds_xgb[closest_index], fpr_xgb[closest_index], tpr_xgb[closest_index]

